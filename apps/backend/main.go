package main

import (
	"log"
	"strings"

	"go-api/middlewares"
	"go-api/services"
	"go-api/types"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "go-api/docs"

	"github.com/gofiber/fiber/v2/middleware/adaptor"
)

func main() {
	// Initialize the cache before starting the server
	err := services.InitializeCache()
	if err != nil {
		log.Fatalf("Failed to initialize cache: %v", err)
	}

	// Create a new Fiber app
	app := fiber.New()

	// Enable CORS for specific origin
	app.Use(cors.New(cors.Config{
		AllowOrigins: "http://localhost:3000",
	}))

	// http middleware -> fiber.Handler
	app.Use(adaptor.HTTPMiddleware(middlewares.LogMiddleware))

	// Public API group
	publicApi := app.Group("/api")

	publicApi.Get("/tickets", func(c *fiber.Ctx) error {
			// Get the search key from query parameters
			searchKey := c.Query("title", "")

			// Fetch tickets from the cache
			tickets, err := services.GetAllTicketsFromCache()
			if err != nil {
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Unable to fetch tickets"})
			}

			// Filter tickets by title if searchKey is provided
			if searchKey != "" {
				var filteredTickets []types.Ticket
				// loop ticket list to find the matching title
				for _, ticket := range tickets {
					if containsIgnoreCase(ticket.Title, searchKey) {
						filteredTickets = append(filteredTickets, ticket)
					}
				}
				return c.JSON(filteredTickets)
			}

			return c.JSON(tickets)
		})

	publicApi.Get("/discounts/:code", func(c *fiber.Ctx) error {
		code := c.Params("code") // Get the discount code as a string
		if code == "" {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid discount code"})
		}
		// Fetch discount from the cache
		discount, err := services.GetDiscountByCodeFromCache(code)
		if err != nil {
			return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Discount code not found"})
		}
		return c.JSON(discount)
	})

	// Start the server
	log.Println("Server is running on http://localhost:8080")
	log.Fatal(app.Listen(":8080"))
}

// Helper function to check if a string contains another string, case-insensitively
func containsIgnoreCase(str, substr string) bool {
	return strings.Contains(strings.ToLower(str), strings.ToLower(substr))
}
